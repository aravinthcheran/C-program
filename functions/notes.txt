26/05: C Programming
global variables are accessible to all functions
local or auto variables are accessible only to the function in which they are declared. they are only created when the function is called and destroyed when the function returns. they are created on the stack.
declaring a variable doesnt allocate memory for it. it just tells the compiler that the variable will be used in the program. memory is allocated when the variable is defined.
defining a variable means declaring it and allocating memory for it.
a variable can be declared many times but defined only once.
syntax of structure in c:
struct structure_name
{
    data_type member1;
    data_type member2;
    data_type member3;
    ...
}; where structure_name is the data_type and member1, member2, member3 are the members of the structure.
to access members of a structure, we use the dot operator and a structure variable.
eg: structure_name.member1
you can also define a structure variable while declaring the structure.
Eg: struct structure_name
    {
        data_type member1;
        data_type member2;
        data_type member3;
        ...
    } structure_variable;


29/05: C Programming
To get an input including spaces, use fgets(string name, int size, stdin);
we can also declare a structure by,
    struct employee
    {
        char name[50];
        int id;
    }e1={"alex", 1001}, e2={"john", 1002};
to store multiple data in a structure use multiple structure variables by declaring it as an array.
Eg: struct employee
    {
        char name[50];
        int id;
    }e1[5];
you can also declare the values of data members by,
    struct employee
    {
        char name[50];
        int id;
    }e1;
    int main()
    {
        struct employee e={.name``="alex", .id=1001};
    }
you can also store data as,
    struct employee
    {
        char name[50];
        int id;
    };
    int main()
    {
        struct employee e[3];
        e[0]=(struct employee){"alex", 1001};
        e[1]=(struct employee){"john", 1002};
        e[2]=(struct employee){"jane", 1003};
    }

30/05: C Programming
pointers are defined usimg the * operator.
when pointers are accessed without a * operator they return the address of the variable they are pointing to.
when pointers are accessed with a * operator they return the value of the variable they are pointing to.
A value is assigned to a pointer using the & operator.Eg: int x=1,*p=&x;
to print address of a float variable using pointer, use %p.
when a pointer is assigned to an array, it points to the first element of the array.
when you declare a pointer to any variable or array,then,
    if : int x=1,*p=&x;
        then, p=&x; and *p=x;
Assume the address of n1 is 100 and n2 is 5.The value of pointers *p1 and *p2 are 4632 and 5142 respectively. Find the values of n1 and n2?
values of n1 and n2 are 4632 and 5142 respectively.the values of p1 and p2 are 100 and 5 respectively.
To  access all the elements of an array using a pointer, use a for loop.
eg: int i[]={1,2,3};
    int *p=i;
    for(int j=0;j<3;j++)
    {
        printf("%d",*p);
        p++;
    }
assinging a pointer variable with * is called dereferencing.
31/05: C Programming
Extern variable:
global variables are defined by the keyword extern.
the scope of a extern variable is the entire program.
the lifetime of a extern variable is the entire program.
the default value of a extern variable is 0.
the use of extern variable is to access a global variable in a function.
static variable:
static variables are declared using the static keyword. they are initialized to 0 by default.
the use of static variables is to retain the value of a variable even after the function returns.
static and global variables are stored in the data segment region whereas local variables are stored in the stack region.
when static variables are initialized they are stored in initialized data segment and when they are not initialized they are stored in uninitialized data segment.
lifetime of a static variable is the entire program whereas the scope is the block in which it is declared.
Register variable:
register variables are declared using the register keyword.
they are stored in the register of the cpu.
Register variables when they do not find space in the register, they are stored in the memory(RAM).They act like a local variables.
The default value of a register variable is garbage value.
use of register variable is to store temporary data.
auto variable:
auto variables are declared using the auto keyword.
they are stored in the stack region.
the default value of an auto variable is garbage value.
the scope of an auto variable is the block in which it is declared.
the lifetime of an auto variable is the block in which it is declared.
the use of auto variables is to store temporary data.
When you pass a pointer to the function, pass it without the * operator.

2/06: C Programming
to declare a character pointer use char *p;
if you declare a value as a pointer to a function and if its value has been modified in the function, then the value of the variable is also modified.
but if you pass it as a normal array, then the value of the variable is not modified.

c programming:16/06
dynamic memory allocation:
malloc() function is used to allocate memory dynamically.
malloc goes to heap memory and allocates memory.after allocation it will return the address of the first byte of the allocated memory.
the data type of the address returned by malloc is void. It expects a typecast.
syntax: ptr=(cast-type*)malloc(byte-size)
Eg: int *p;
    p=(int *)malloc(sizeof(int)*n);
calloc() function is used to allocate memory dynamically. A VOID POINTER.
it takes 2 inputs, the number of elements and the size of each element.
it initializes the allocated memory to 0 wheras its garbage value in malloc.
syntax is p=(cast-type*)calloc(n,element-size)
realloc() function is used to reallocate memory dynamically.
it takes 2 inputs, the pointer to the previously allocated memory and the new size.
syntax is p=realloc(ptr,new-size)
eg: int *p;
    p=(int *)malloc(sizeof(int)*n);
    p=realloc(p,sizeof(int)*m);
2d pointer:
we can declare a pointer to 2d array using (*p)[];
to print values of an 2d array using pointers, use *(*(p+i)+j)
to print values of an 2d array using pointers, use *(p[i]+j)
in a pointer array 3[p]=*(3+p)=*(p+3)=p[3]
28/06: C Programming
to define a structure array using pointers, use struct employee *p[3];
Nested structures:
structures can be nested inside another structure.
Eg: struct address
    {
        int doorno;
        char street[50];
        char city[50];
        char statename[50];
        int pincode;
    }
    struct student
    {
        char name[50];
        int rollno;
        struct address a;//nested structure
    }
    int main()
    {
        struct student s;
        s.a.doorno=1;
        //to access the members of the nested structure, use the dot operator, with the structure variable and the structure member.
    }
    to access a structure data using pointers, use the arrow operator.
    Eg: struct student
        {
            char name[50];
            int rollno;
            struct address a;//nested structure
        }
        int main()
        {
            struct student *p;
            p->a.doorno=1;
            //to access the members of the nested structure, use the arrow operator, with the structure pointer and the structure member.
        }
4/07: C Programming
files:
to open a file, use fopen("filename","mode");
modes:
r: read
w: write
a: append
r+: read and write
w+: read and write
seek is used to move the file pointer to a particular position.
    seek_set: start of the file-0
    seek_cur: current position of the file-1
    seek_end: end of the file-2
to close a file, use fclose(file pointer);
to read a file, use fgetc(file pointer);
to write a file, use fputc(character,file pointer);
syntax of seek is fseek(file pointer,offset,position);
ftell(file pointer) is used to find the current position of the file pointer.
feof(file pointer) is used to find the end of the file.
it will take the file pointer as input and returns 0 if the file pointer is not at the end of the file and returns 1 if the file pointer is at the end of the file.
to ope a file using path, use fopen("path","mode");
it is in read mode by default.


fwrite is used to write data into a file.
syntax is fwrite(address of the variable,size of the variable,number of variables,file pointer);